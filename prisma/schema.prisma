// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  
  // Life Museum specific fields
  exhibits      Exhibit[]
  comments      Comment[]
  tasks         Task[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

// Life Museum Models

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String   @default("#6366f1")
  icon      String?
  
  exhibits  Exhibit[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("Category")
}

model Exhibit {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?     @db.Text
  content     String      @db.LongText
  coverImage  String?     @db.LongText
  
  // Metadata
  visibility    Visibility @default(PRIVATE)
  emotionScore  Int?
  exhibitDate   DateTime?
  
  // Relations
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  tags     ExhibitTag[]
  comments Comment[]
  media    Media[]
  
  // Custom data
  payload Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("Exhibit")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique
  
  exhibits ExhibitTag[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("Tag")
}

model ExhibitTag {
  id        String @id @default(cuid())
  exhibitId String
  tagId     String
  
  exhibit Exhibit @relation(fields: [exhibitId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([exhibitId, tagId])
  @@map("ExhibitTag")
}

model Comment {
  id      String @id @default(cuid())
  content String @db.Text
  
  // Relations
  exhibitId String
  exhibit   Exhibit @relation(fields: [exhibitId], references: [id], onDelete: Cascade)
  
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  
  // Nested comments
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("Comment")
}

model Media {
  id   String    @id @default(cuid())
  name String?
  type MediaType
  url  String    @db.Text
  size Int?
  
  exhibitId String
  exhibit   Exhibit @relation(fields: [exhibitId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("Media")
}

model Task {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  status      TaskStatus    @default(PENDING)
  category    TaskCategory  @default(LIFE_LONG_TERM)
  
  // 任务日期 - 按天组织任务
  taskDate    DateTime      @db.Date
  completedAt DateTime?
  
  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("Task")
}

// Enums

enum Visibility {
  PRIVATE
  SHARED
  PUBLIC
  UNLISTED
}

enum TaskStatus {
  PENDING     // 待完成
  COMPLETED   // 已完成
}

enum TaskCategory {
  STUDY_LONG_TERM    // 学习-长期任务
  STUDY_SHORT_TERM   // 学习-短期任务
  LIFE_LONG_TERM     // 生活-长期任务
  LIFE_SHORT_TERM    // 生活-短期任务
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
} 